generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String         @id
  displayName       String?        @unique
  status            UserStatus?    @default(offline)
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  onboarded         Boolean        @default(false)
  profilePictureUrl String?
  fullName          String?
  conversationsA    Conversation[] @relation("ParticipantA")
  conversationsB    Conversation[] @relation("ParticipantB")
  friendOf          Friend[]       @relation("FriendUsers")
  friends           Friend[]       @relation("UserFriends")
  notifications     Notification[]
  readReceipts      ReadReceipt[]
  settings          Setting?
}

model Friend {
  id        String       @id @default(uuid())
  userId    String
  friendId  String
  status    FriendStatus @default(pending)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  friend    User         @relation("FriendUsers", fields: [friendId], references: [id])
  user      User         @relation("UserFriends", fields: [userId], references: [id])

  @@unique([userId, friendId])
  @@index([userId, friendId])
}

model Conversation {
  id             String    @id @default(uuid())
  participantAId String
  participantBId String
  startedAt      DateTime
  lastMessageAt  DateTime?
  participantA   User      @relation("ParticipantA", fields: [participantAId], references: [id])
  participantB   User      @relation("ParticipantB", fields: [participantBId], references: [id])
  messages       Message[]
}

model Message {
  id             String        @id @default(uuid())
  conversationId String
  senderId       String
  content        String
  isRead         Boolean       @default(false)
  readAt         DateTime?
  sentAt         DateTime
  updatedAt      DateTime      @updatedAt
  conversation   Conversation  @relation(fields: [conversationId], references: [id])
  readReceipts   ReadReceipt[]
}

model ReadReceipt {
  id        String    @id @default(uuid())
  messageId String
  userId    String
  readAt    DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  message   Message   @relation(fields: [messageId], references: [id])
  user      User      @relation(fields: [userId], references: [id])
}

model Setting {
  id                      String   @id @default(uuid())
  userId                  String   @unique
  theme                   String?
  notificationPreferences Json?
  language                String?
  chatHistoryRetention    String?
  statusVisibility        String?
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  user                    User     @relation(fields: [userId], references: [id])
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  type      String
  content   String
  isRead    Boolean  @default(false)
  priority  String?
  metadata  Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

enum UserStatus {
  online
  offline
}

enum FriendStatus {
  pending
  accepted
  refused
  blocked
}
